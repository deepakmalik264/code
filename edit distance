      bool isValid(int i,int j,int n,int m){
          if(i>=0 and j>=0 and i<n and j<m) return true;
          return false;
      }

     int helper(int n,int m,int i,int j,vector<vector<int>>&matrix,vector<vector<int>>&dp){
         
         if(i==n-1){
             return matrix[i][j];
         }
         if(dp[i][j]!=-1) return dp[i][j];
         
         int option1 = INT_MIN;
         int option2 = INT_MIN;
         int option3 = INT_MIN;
         
         if(isValid(i+1,j,n,m))  option1 = matrix[i][j]   +  helper(n,m,i+1,j,matrix,dp);
         if(isValid(i+1,j+1,n,m))  option2 = matrix[i][j]  +  helper(n,m,i+1,j+1,matrix,dp);
         if(isValid(i+1,j-1,n,m))  option3  = matrix[i][j] +  helper(n,m,i+1,j-1,matrix,dp);
         
         return dp[i][j] = max({option1,option2,option3});
         
         
         
     }



    int maximumPath(int N, vector<vector<int>> matrix)
    {
        // code here
        
        
        
        const int n = matrix.size();
        const int m = matrix[0].size();
        int answer = 0;
         /*
        vector<vector<int>> dp(n+1,vector<int>(m+1,-1));
       
        for(int i=0;i<n;i++){
            answer = max(answer,helper(n,m,0,i,Matrix,dp));
        }
        return answer;
        
        1 2  3
        5 2  21
        1 2  2
        
        
        */
        
        
        
        int dp[n][m];
        
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                
                if(i==0) dp[i][j]       =      matrix[i][j];
                else if(j==0) dp[i][j]  =      matrix[i][j] + max(dp[i-1][j],dp[i-1][j+1]);
                else if(j==m-1) dp[i][j]  = matrix[i][j] + max(dp[i-1][j],dp[i-1][j-1]);
                else dp[i][j] = dp[i][j]  = matrix[i][j] + max({dp[i-1][j],dp[i-1][j+1],dp[i-1][j-1]});
                
                 if(i==n-1) answer = max(answer,dp[i][j]);
            }
           
        }
        return answer;
        
        
        
    }
};
