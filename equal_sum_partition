class Solution {
public:
    
    bool helper(vector<int>&nums,int i,int n,int target,vector<vector<int>>&dp){
        
        if(i>=n and target==0) return true;
        if(i>=n) return false;
        if(target==0) return true;
        
        if(dp[i][target]!=-1){
            
            if(dp[i][target]==0) return false;
            else return true;
            
        }
        bool option1 = false;
        
        if(nums[i]<=target){
             
            option1 = helper(nums,i+1,n,target-nums[i],dp);
        }
        
        bool  option2 = helper(nums,i+1,n,target,dp);
        
        
        bool res = (option1 or option2) ;
        
        if(res) dp[i][target] = 1;
        else dp[i][target] = 0;
        return res;
        
        
        
    }
    
    
    
    bool canPartition(vector<int>& nums) {
     
        const int n  = nums.size();
        
        int sum = 0;
        
        for(auto x: nums) sum+=x;
     
        
        if(sum&1) return false;
        
        sum = sum/2;
        int dp[n+1][sum+1];
        
        for(int i=0;i<=n;i++){
            for(int j=0;j<=sum;j++){
                dp[i][j] =0;
                if(i==0 and j==0) dp[i][j] =1;
                else if(i==0 or j==0) dp[i][j] = 0;
                
                else {
                    if(nums[i-1]<=j){
                      int p = dp[i-1][j-nums[i-1]];
                      if(p==1) dp[i][j] = 1;
                    }
                      int q = dp[i-1][j];
                      if(q==1) dp[i][j] = 1;
                    
                    
                }
            
            }
        }
        
        return dp[n][sum] ==1? true:false;
        
         
    }
};
